# Test workflow that is just committing the version bump to a branch for checking permissions
#

name: Version Bump and Changelog Generation

on:
  workflow_dispatch:
    inputs:
      sha:
        description: "sha"
        default: 14b6351fe7b347ed19f3dbb4c105bb946b574e7c
        required: true
        type: string
      version_number:
        description: ""
        required: true
        default: 1.4.1b1
        type: string
      target_branch:
        description: target_branch
        default: er/unprotected-branch
        required: true
        type: string
      env_setup_script_path:
        description: ""
        required: false
        type: string
        default: "scripts/env-setup.sh"
      nightly_release:
        description: ""
        type: boolean
        default: false
        required: false


permissions:
  contents: write

defaults:
  run:
    shell: bash

env:
  PYTHON_TARGET_VERSION: 3.8
  NOTIFICATION_PREFIX: "[Release Preparation]"

jobs:
  log-inputs:
    runs-on: ubuntu-latest

    steps:
      - name: "[DEBUG] Print Variables"
        run: |
          # WORKFLOW INPUTS
          echo The last commit sha in the release:   ${{ inputs.sha }}
          echo The release version number:           ${{ inputs.version_number }}
          echo The branch that we will release from: ${{ inputs.target_branch }}
          echo Path to the environment setup script: ${{ inputs.env_setup_script_path }}
          echo Nightly release:                      ${{ inputs.nightly_release }}
          # ENVIRONMENT VARIABLES
          echo Python target version:                ${{ env.PYTHON_TARGET_VERSION }}
          echo Notification prefix:                  ${{ env.NOTIFICATION_PREFIX }}

  audit-version-in-code:
    runs-on: ubuntu-latest

    outputs:
      up_to_date: ${{ steps.version-check.outputs.up_to_date }}

    steps:
      - name: "Checkout ${{ github.repository }} Commit ${{ inputs.sha }}"
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.sha }}

      - name: "Check Current Version In Code"
        id: version-check
        run: |
          is_updated=false
          if grep -Fxq "current_version = ${{ inputs.version_number }}" .bumpversion.cfg
          then
            is_updated=true
          fi
          echo "up_to_date=$is_updated" >> $GITHUB_OUTPUT

      - name: "[Notification] Check Current Version In Code"
        run: |
          title="Version check"
          if [[ ${{ steps.version-check.outputs.up_to_date }} == true ]]
          then
            message="The version in the codebase is equal to the provided version"
          else
            message="The version in the codebase differs from the provided version"
          fi
          echo "::notice title=${{ env.NOTIFICATION_PREFIX }}: $title::$message"

      - name: "[DEBUG] Print Outputs"
        run: |
          echo up_to_date: ${{ steps.version-check.outputs.up_to_date }}

  skip-version-bump:
    runs-on: ubuntu-latest
    needs: [audit-version-in-code]
    if: needs.audit-version-in-code.outputs.up_to_date == 'true'

    steps:
      - name: "Version Already Bumped"
        run: |
          # Send notification
          title="Skip version bump"
          message="The version has already been bumped to ${{ inputs.version_number }}, skipping version bump"
          echo "::notice title=${{ env.NOTIFICATION_PREFIX }}: $title::$message"

  create-temp-branch:
    runs-on: ubuntu-latest
    needs: [audit-version-in-code]
    if: needs.audit-version-in-code.outputs.up_to_date == 'false'

    outputs:
      branch_name: ${{ steps.variables.outputs.branch_name }}

    steps:
      - name: "Checkout ${{ github.repository }} Commit ${{ inputs.sha }}"
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.sha }}

      - name: "Generate Branch Name"
        id: variables
        run: |
          name="prep-release/"
          name+="${{ inputs.version_number }}_$GITHUB_RUN_ID"
          echo "branch_name=$name" >> $GITHUB_OUTPUT

      - name: "Create Branch - ${{ steps.variables.outputs.branch_name }}"
        run: |
          git checkout -b ${{ steps.variables.outputs.branch_name }}
          git push -u origin ${{ steps.variables.outputs.branch_name }}

      - name: "[Notification] Temp branch created"
        run: |
          # Send notification
          title="Temp branch generated"
          message="The ${{ steps.variables.outputs.branch_name }} branch created"
          echo "::notice title=${{ env.NOTIFICATION_PREFIX }}: $title::$message"

      - name: "[DEBUG] Print Outputs"
        run: |
          echo branch_name ${{ steps.variables.outputs.branch_name }}

  bump-version:
    runs-on: ubuntu-latest
    needs: [audit-version-in-code, create-temp-branch]

    steps:
      - name: "Checkout ${{ github.repository }} Branch ${{ needs.create-temp-branch.outputs.branch_name }}"
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.create-temp-branch.outputs.branch_name }}

      
      - name: "Add Homebrew To PATH"
        run: |
          echo "/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin" >> $GITHUB_PATH

      - name: "Install Homebrew Packages"
        run: |
          brew install pre-commit
      
      # this step will fail on whitespace errors but also correct them
      - name: "Remove Trailing Whitespace Via Pre-commit"
        continue-on-error: true
        run: |
          pre-commit run trailing-whitespace --files .bumpversion.cfg CHANGELOG.md .changes/*
          git status

      # this step will fail on newline errors but also correct them
      - name: "Removing Extra Newlines Via Pre-commit"
        continue-on-error: true
        run: |
          pre-commit run end-of-file-fixer --files .bumpversion.cfg CHANGELOG.md .changes/*
          git status

      - name: "Set up Python - ${{ env.PYTHON_TARGET_VERSION }}"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_TARGET_VERSION }}

      - name: "Install Python Dependencies"
        if: needs.audit-version-in-code.outputs.up_to_date == 'false'
        run: |
          python3 -m venv env
          source env/bin/activate
          python -m pip install --upgrade pip

      - name: "Bump Version To ${{ inputs.version_number }}"
        if: needs.audit-version-in-code.outputs.up_to_date == 'false'
        # note: bumpversion is no longer supported, it actually points to bump2version now
        run: |
          source env/bin/activate
          python -m pip install -r dev-requirements.txt
          env/bin/bumpversion --allow-dirty --new-version ${{ inputs.version_number }} major
          git status

      - name: "[Notification] Bump Version To ${{ inputs.version_number }}"
        if: needs.audit-version-in-code.outputs.up_to_date == 'false'
        run: |
          title="Version bump"
          message="Version successfully bumped in codebase to ${{ inputs.version_number }}"
          echo "::notice title=${{ env.NOTIFICATION_PREFIX }}: $title::$message"

      - name: "Commit & Push Changes"
        run: |
          #Data for commit
          user="Github Build Bot"
          email="buildbot@fishtownanalytics.com"
          commit_message="Bumping version to ${{ inputs.version_number }} and generate changelog"
          #Commit changes to branch
          git config user.name "$user"
          git config user.email "$email"
          git pull
          git add .
          git commit -m "$commit_message"
          git push

  merge-changes-into-target-branch:
    runs-on: ubuntu-latest
    needs: [bump-version, create-temp-branch]

    steps:
      - name: "[Debug] Print Variables"
        run: |
          echo target_branch: ${{ inputs.target_branch }}
          echo branch_name:   ${{ needs.create-temp-branch.outputs.branch_name }}

      - name: "Checkout Repo ${{ github.repository }}"
        uses: actions/checkout@v3

      - name: "Merge Changes Into ${{ inputs.target_branch }}"
        uses: everlytic/branch-merge@1.1.2
        with:
          source_ref: ${{ needs.create-temp-branch.outputs.branch_name }}
          target_branch: ${{ inputs.target_branch }}
          github_token: ${{ secrets.FISHTOWN_BOT_PAT }} # TODO: probably need to use a custom PAT to override ``.latest`` protection rules
          commit_message_template: "[Automated] Merged {source_ref} into target {target_branch} during release process"

  determine-release-sha:
    runs-on: ubuntu-latest
    needs:
      [
        create-temp-branch,
        merge-changes-into-target-branch,
        audit-version-in-code,
      ]
    # always run this job, regardless of if the dependant jobs were skipped
    if: always()

    # Get the sha that will be released.  If the changelog already exists on the input sha and the version has already been bumped,
    # then it is what we will release. Otherwise we generated a changelog and did the version bump in this workflow and there is a
    # new sha to use from the merge we just did.  Grab that here instead.
    outputs:
      final_sha: ${{ steps.resolve_commit_sha.outputs.release_sha }}

    steps:
      - name: "[Debug] Print Variables"
        run: |
          echo target_branch:    ${{ inputs.target_branch }}
          echo new_branch:       ${{ needs.create-temp-branch.outputs.branch_name }}
          echo up_to_date:       ${{ needs.audit-version-in-code.outputs.up_to_date }}

      - name: "Resolve Branch To Checkout"
        id: resolve_branch
        run: |
          branch=${{ inputs.target_branch }}
          echo "target_branch=$branch" >> $GITHUB_OUTPUT

      - name: "[Notification] Resolve Branch To Checkout"
        run: |
          title="Branch pick"
          message="The ${{ steps.resolve_branch.outputs.target_branch }} branch will be used for release"
          echo "::notice title=${{ env.NOTIFICATION_PREFIX }}: $title::$message"

      - name: "Checkout Resolved Branch - ${{ steps.resolve_branch.outputs.target_branch }}"
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.resolve_branch.outputs.target_branch }}

      - name: "[Debug] Log Branch"
        run: git status

      - name: "Resolve Commit SHA For Release"
        id: resolve_commit_sha
        run: |
          commit_sha=$(git rev-parse HEAD)
          echo "release_sha=$commit_sha" >> $GITHUB_OUTPUT

      - name: "[Notification] Resolve Commit SHA For Release"
        run: |
          title="Release commit pick"
          message="The ${{ steps.resolve_commit_sha.outputs.release_sha }} commit will be used for release"
          echo "::notice title=${{ env.NOTIFICATION_PREFIX }}: $title::$message"

      - name: "Remove Temp Branch - ${{ needs.create-temp-branch.outputs.branch_name }}"
        if: ${{ needs.create-temp-branch.outputs.branch_name != '' }}
        run: |
          git push origin -d ${{ needs.create-temp-branch.outputs.branch_name }}

      - name: "[Debug] Print Outputs"
        run: |
          echo release_sha: ${{ steps.resolve_commit_sha.outputs.release_sha }}