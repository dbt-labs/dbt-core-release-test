# **what?**
# Take the given commit, run unit tests specifically on that sha, build and package it.

# **why?**
# Ensure an automated and tested release process

# **when?**
# This will only run manually with a given sha and version

name: Build, Test, and Package

on:
  workflow_dispatch:
    inputs:
      sha:
        description: "The last commit sha in the release"
        required: true
      version_number:
        description: "The release version number (i.e. 1.0.0b1)"
        required: true

permissions:
  contents: write # this is the permission that allows creating a new release

defaults:
  run:
    shell: bash

env:
  ARTIFACT_RETENTION_DAYS: 1

jobs:
  unit:
    name: Unit test

    runs-on: ubuntu-latest

    env:
      TOXENV: "unit"

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          ref: ${{ github.event.inputs.sha }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install python dependencies
        run: |
          pip install --user --upgrade pip
          pip install tox
          pip --version
          tox --version

      - name: Run tox
        run: tox

  build:
    name: Build packages

    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository - ${{ inputs.sha }}
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          ref: ${{ inputs.sha }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install python dependencies
        run: |
          pip install --user --upgrade pip
          pip install --upgrade setuptools wheel twine check-wheel-contents
          pip --version

      - name: Build distributions
        run: ./scripts/build-dist.sh

      - name: Show distributions
        run: ls -lh dist/

      - name: Check distribution descriptions
        run: |
          twine check dist/*

      - name: Check wheel contents
        run: |
          check-wheel-contents dist/*.whl --ignore W007,W008

      - name: Upload build artifact - ${{ inputs.version_number }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.version_number }}
          path: |
            dist/
            !dist/dbt-${{ inputs.version_number }}.tar.gz
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  test-build:
    name: Verify packages

    needs: [unit, build]

    runs-on: ubuntu-latest

    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install python dependencies
        run: |
          pip install --user --upgrade pip
          pip install --upgrade wheel
          pip --version

      - name: Download build artifact - ${{ inputs.version_number }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.version_number }}
          path: dist/

      - name: Show distributions
        run: ls -lh dist/

      - name: Install wheel distributions
        run: |
          find ./dist/*.whl -maxdepth 1 -type f | xargs pip install --force-reinstall --find-links=dist/

      - name: Check wheel distributions
        run: |
          dbt --version

      - name: Install source distributions
        run: |
          find ./dist/*.gz -maxdepth 1 -type f | xargs pip install --force-reinstall --find-links=dist/

      - name: Check source distributions
        run: |
          dbt --version
